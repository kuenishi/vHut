<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.

       @see spark.components.Button

      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minWidth="21" minHeight="21"
			 alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
            /* Define the skin elements that should not be colorized.
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];

            /**
             * @private
             */
            override public function get colorizeExclusions():Array {return exclusions;}

            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }

            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");

                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    fill.radiusX = cornerRadius;
                    highshadow.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }

				if(lowshadow) lowshadow.radiusX = cornerRadius;
				if(middleshadow) middleshadow.radiusX = cornerRadius;

                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

            private var cornerRadius:Number = 2;
        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>

    <!-- layer 1: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
        <s:fill>
			<s:SolidColor color="#FFFFFF" alpha="0.6"
						  alpha.over="0.9"
						  alpha.down="0.9"
						  color.disabled="#000000" alpha.disabled="0.2"/>
        </s:fill>
    </s:Rect>

    <!-- layer 2: fill lowshadow -->
    <!--- @private -->
    <s:Rect id="lowshadow" left="1" right="1" top="1" bottom="1" radiusX="2" excludeFrom="down">
        <s:fill>
            <s:LinearGradient rotation="270">
                <s:GradientEntry color="0x000000" ratio="0.0" alpha="0.2" />
                <s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099" />
                <s:GradientEntry color="0x000000" ratio="0.48001" alpha="0" />
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <!-- layer 3: fill highshadow -->
    <!--- @private -->
	<s:Rect id="highshadow" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" ratio="0.0" alpha="0.2" />
				<s:GradientEntry color="0x000000" ratio="0.08" alpha="0.0099" />
				<s:GradientEntry color="0x000000" ratio="0.08001" alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

    <!-- layer 4: middle shadow (down state only) -->
    <!--- @private -->
    <s:Rect id="middleshadow" left="1" right="1" top="1" bottom="1" radiusX="2" includeIn="down">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.1" />
				<s:GradientEntry color="0x000000" alpha="0.25" ratio="0.6" />
				<s:GradientEntry color="0x000000" alpha="0.07" ratio="0.9" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="1.0" />
			</s:LinearGradient>
		</s:fill>
    </s:Rect>

    <!-- layer 5: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
        <s:stroke>
			<!--
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x8C6700"
                                 alpha="0.5625"
                                 alpha.down="0.6375" />
                <s:GradientEntry color="0x8C6700"
                                 alpha="0.75"
                                 alpha.down="0.85" />
            </s:LinearGradientStroke>
			-->
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000"
								 alpha="0.2625"
								 alpha.down="0.3375" />
				<s:GradientEntry color="0x000000"
								 alpha="0.45"
								 alpha.down="0.55" />
			</s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 6: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>

</s:SparkSkin>
